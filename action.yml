name: 'Create Jira Issue from GitHub Issue'
description: 'Determines Jira issue type based on GitHub labels and creates a corresponding Jira issue.'
author: 'diverger <diverger@live.cn>'

inputs:
  jira-host:
    description: 'Jira instance base URL'
    required: true
  jira-email:
    description: 'Email for Jira authentication'
    required: true
  jira-token:
    description: 'API Token for Jira authentication'
    required: true
  jira-project:
    description: 'Jira project key'
    required: true
  repository:
    description: 'GitHub repository name'
    required: true
  issue-title:
    description: 'GitHub issue title'
    required: true
  issue-number:
    description: 'GitHub issue number'
    required: true
  issue-body:
    description: 'GitHub issue body'
    required: false
    default: ''
  issue-url:
    description: 'GitHub issue URL'
    required: true
  issue-labels:
    description: 'JSON string array of GitHub issue labels' # Inputting as JSON string for easier handling in shell
    required: false
    default: '[]'
  components:
    description: 'Name of the GitHub repository'
    required: true
  extra-fields:
    description: 'JSON string for extra fields to pass to the Jira API. Overrides default labels and components if set.'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    # Map GitHub labels to Jira issue types based on project support. Default to 'Bug'.
    # Priority: bug > enhancement > feature > task > epic > default (Bug)
    - name: Determine Jira Issue Type
      id: determine_issuetype
      shell: bash
      run: |
        issue_type="Bug" # Default
        labels='${{ inputs.issue-labels }}'
        if [[ $(echo "$labels" | jq 'contains(["bug"])') == "true" ]]; then
          issue_type="Bug"
        elif [[ $(echo "$labels" | jq 'contains(["enhancement"])') == "true" ]]; then
          issue_type="Improvement"
        elif [[ $(echo "$labels" | jq 'contains(["feature"])') == "true" ]]; then
          issue_type="New Feature"
        elif [[ $(echo "$labels" | jq 'contains(["task"])') == "true" ]]; then
          issue_type="Task"
        elif [[ $(echo "$labels" | jq 'contains(["epic"])') == "true" ]]; then
          issue_type="Epic"
        fi
        echo "Calculated Jira Issue Type: $issue_type"
        echo "type=$issue_type" >> $GITHUB_OUTPUT

    - name: Prepare Extra Fields
      id: prepare_extra_fields
      shell: bash
      run: |
        extra_fields_input='${{ inputs.extra-fields }}'
        if [[ -z "$extra_fields_input" || "$extra_fields_input" == "{}" ]]; then
          # Construct default JSON if extra-fields is empty or just '{}'
          labels_json='${{ inputs.issue-labels }}'
          components_json='[{"name": "${{ inputs.components }}"}]'
          # Ensure labels_json is a valid JSON array, default to empty array if not
          if ! echo "$labels_json" | jq -e . > /dev/null 2>&1; then
            labels_json='[]'
          fi
          # Combine into the final JSON structure using compact output
          extra_fields_json=$(jq -c -n --argjson labels "$labels_json" --argjson components "$components_json" \
            '{"labels": $labels, "components": $components}')
        else
          # Use the provided extra-fields input directly
          extra_fields_json="$extra_fields_input"
        fi
        echo "Prepared extraFields JSON: $extra_fields_json"
        echo "json=$extra_fields_json" >> $GITHUB_OUTPUT

    - name: Create Jira Issue
      id: create
      uses: tomhjp/gh-action-jira-create@v0.2.1
      env:
        JIRA_BASE_URL: ${{ inputs.jira-host }}
        JIRA_USER_EMAIL: ${{ inputs.jira-email }}
        JIRA_API_TOKEN: ${{ inputs.jira-token }}
      with:
        project: ${{ inputs.jira-project }}
        issuetype: ${{ steps.determine_issuetype.outputs.type }}
        summary: "${{ inputs.issue-title }} #${{ inputs.issue-number }}"
        description: |
          ${{ inputs.issue-body }}
          ----
          *Created from [${{ inputs.repository }}: Issue #${{inputs.issue-number}}](${{ inputs.issue-url }})*
        extraFields: ${{ steps.prepare_extra_fields.outputs.json }}

